@page
@model FinalProject.Pages.GamePageModel
@{
}
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <script src="/js/signalr/dist/browser/signalr.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="/js/site.js"></script>
    <script src="/js/chat.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/paper.js/0.12.15/paper-full.min.js" integrity="sha512-ovjLI1ZcZe6bw+ImQ21r+sv8q/Vwob2kq7tFidK6E1LWfi0T4uobbmpfEU1//a9h9o5Kkt+MnMWf6rWlg0EiMw==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
</head>

<body onload="FillGrid()">
    <div class="container-fluid">
        <center>
            <h1>@Model.playerNum BOGGLE!</h1>
            <h4>Timer: <a id="timer_hold"></a></h4>

            <div class="row">
                <div class="col">
                    <div id="grid" class="grid-container">
                        <div id="0" class="grid-item">0 </div>
                        <div id="1" class="grid-item">1 </div>
                        <div id="2" class="grid-item">2 </div>
                        <div id="3" class="grid-item">3 </div>
                        <div id="4" class="grid-item">4 </div>
                        <div id="5" class="grid-item">5 </div>
                        <div id="6" class="grid-item">6 </div>
                        <div id="7" class="grid-item">7 </div>
                        <div id="8" class="grid-item">8 </div>
                        <div id="9" class="grid-item">9 </div>
                        <div id="10" class="grid-item">10</div>
                        <div id="11" class="grid-item">11</div>
                        <div id="12" class="grid-item">12</div>
                        <div id="13" class="grid-item">13</div>
                        <div id="14" class="grid-item">14</div>
                        <div id="15" class="grid-item">15</div>
                    </div>
                </div>
            </div>
            <br />
            <div class="row">
                <div id="feedback" class="col"></div>
            </div>
            <br />
            <div class="row">
                <form>
                    <input type="button" value="Submit" onclick="SubmitWord(selectedLetters)" /> <br /><br />
                    <input type="button" value="Clear" onclick="ClearWord()" />
                </form>
            </div>

            <br />
            <br />
        </center>
    </div>
</body>

@section Scripts{
<script>
    var connection = new signalR.HubConnectionBuilder().withUrl("/chatHub").build();

    connection.start().then(function () {
    }).catch(function (err) {
        return console.error(err.toString());
    });
</script>
        
<script>
    var clickedBoxes = [];
    var usedWords = [];
    var selectedLetters = "";
    var numSelected = 0;
    var playerScore = 0
    var feedbackElement = document.getElementById("feedback");
    const squareCheck = [
        /*0*/[1, 4, 5],
        /*1*/[0, 2, 4, 5, 6],
        /*2*/[1, 3, 5, 6, 7],
        /*3*/[2, 6, 7],
        /*4*/[0, 1, 5, 8, 9],
        /*5*/[0, 1, 2, 4, 6, 8, 9, 10],
        /*6*/[1, 2, 3, 5, 7, 9, 10, 11],
        /*7*/[2, 3, 6, 10, 11],
        /*8*/[4, 5, 9, 12, 13],
        /*9*/[4, 5, 6, 8, 10, 12, 13, 14],
       /*10*/[5, 6, 7, 9, 11, 13, 14, 15],
       /*11*/[6, 7, 10, 14, 15],
       /*12*/[8, 9, 13],
       /*13*/[8, 9, 10, 12, 14],
       /*14*/[9, 10, 11, 13, 15],
       /*15*/[10, 11, 14]
    ];    
</script>

<script type="text/javascript">
    $(function () {
        $(document).on('click', '.grid-item', function() {
            var $this = $(this);
            var id = $(this).attr('id');
            var letter = $this.text();

            if (numSelected == 0) { 
                //first box clicked
                clickedBoxes.push(id);
                selectedLetters += letter;
                numSelected++;

                $this.css({
                    'background-color': 'green'
                });
            }
            else if (CheckClick(id) == true) {
                clickedBoxes.push(id);
                selectedLetters += letter;
                numSelected++;

                $this.css({
                    'background-color': 'green'
                });
            }
        });
    });
</script>

<script type="text/javascript">
    function ClearWord() {
        clickedBoxes = [];
        selectedLetters = "";
        numSelected = 0;

        var squares = document.getElementsByClassName("grid-item");
        for (var i = 0; i < 16; i++){
            squares[i].style.background = "#d3eafd";
        }
    }
</script>

<script type="text/javascript">
            
    function CheckClick(id) {
                
        var prevSelected = parseInt(clickedBoxes[numSelected - 1]);

        //first check to see if already clicked
        if (clickedBoxes.includes(id)) {
            return false;
        }

        //next check to see if click is touching the last square (use ids)
        if (squareCheck[id].includes(prevSelected)){
            return true;
        }
        else {
            //else fail
            return false;
        }
    }
</script>


<script type="text/javascript">
    
    function FillGrid() {
        var board = [];
 
        @foreach (var d in Model.boggleBoard)
        {
            @:board.push("@d");

        }

        var squares = document.getElementsByClassName("grid-item");

        for (var i = 0; i < board.length; i++){
            squares[i].innerHTML = board[i];
        }

     }
</script>

<script>
    connection.on("NotAWord", function() {
        
        feedbackElement.style.color = "red";
        feedbackElement.innerHTML = "That's Not A Word!";
        ClearWord();
    });
</script>

<script>
    connection.on("Correct", function() {
        feedbackElement.style.color = "green";
        feedbackElement.innerHTML = "Correct!";
        usedWords.push(selectedLetters);
        ClearWord();
    });
</script>

<script>
    function SubmitWord(selectedLetters) {
        
        if (selectedLetters.length < 3) {
            feedbackElement.style.color = "red";
            feedbackElement.innerHTML = "Word must be at least 3 letters!";
        }
        else if (usedWords.includes(selectedLetters)) {
            feedbackElement.style.color = "red";
            feedbackElement.innerHTML = "You Already Picked That Word!";
            ClearWord();
        }
        else{
            connection.invoke("CheckWord", selectedLetters);
        }
    }
</script>

<script>
    connection.on("HideGrid", function () {
        document.getElementById("grid").style.visibility = "hidden"; 
        document.getElementById("timer_hold").textContent = "timer and game will begin when two players join";
    });
</script>

<script>
    connection.on("ShowGrid", function () {
        document.getElementById("grid").style.visibility = "visible"; 
        document.getElementById("timer_hold").textContent = "Set";
        timeSet();
    });
</script>

<script>
    connection.on("ClearBoard", function () {
        clickedBoxes = [];
        selectedLetters = "";
        numSelected = 0;

        var squares = document.getElementsByClassName("grid-item");
        for (var i = 0; i < 16; i++) {
            squares[i].style.background = "#d3eafd";
        }
    });
</script>

<!-----------TIMER STUFF -------------------->
<script>
var limit = 1; // mins 

var timExp = false;

function timeSet() {
  // Set the date we're counting down to
    var today = new Date();
    var addtime = today.setMinutes(today.getMinutes() + limit);
 var countDownDate = new Date(addtime).getTime();

// Update the count down every 1 second
var x = setInterval(function() {

  // Get today's date and time
  var now = new Date().getTime();

  // Find the distance between now and the count down date
  var distance = countDownDate - now;

        // Time calculations for days, hours, minutes and seconds
        var days = Math.floor(distance / (1000 * 60 * 60 * 24));
        var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
        var seconds = Math.floor((distance % (1000 * 60)) / 1000);

        // Display the result in the element with id="demo"
        document.getElementById("timer_hold").textContent = minutes + "m " + seconds + "s ";

        // If the count down is finished, write some text
        if (distance < 0) {
            clearInterval(x);
            document.getElementById("timer_hold").textContent = "EXPIRED";
            timExp = true;
            location.href = '/Results';
        }
    }, 1000);

}
</script>
}